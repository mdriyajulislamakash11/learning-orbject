JavaScript Object ‡¶ï‡ßÄ?
Object ‡¶π‡¶≤ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶°‡ßá‡¶ü‡¶æ key-value pair ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶∏‡¶û‡ßç‡¶ö‡¶ø‡¶§ ‡¶•‡¶æ‡¶ï‡ßá‡•§ ‡¶è‡¶ü‡¶ø ‡¶è‡¶Æ‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡ßá ‡¶∏‡¶Ç‡¶ó‡¶†‡¶ø‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

Object ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø:
‡ßß. Object Literal Syntax:
javascript
Copy code
const person = {
  name: "John Doe",
  age: 30,
  isStudent: false
};
‡ß®. Object Constructor:
javascript
Copy code
const person = new Object();
person.name = "John Doe";
person.age = 30;
person.isStudent = false;
Object ‡¶è‡¶∞ ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶®:
Property (Key-Value Pair):
‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø property ‡¶è‡¶ï‡¶ü‡¶ø key (string ‡¶¨‡¶æ symbol) ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø value (‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ) ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá‡•§
‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

javascript
Copy code
const car = {
  brand: "Toyota",
  model: "Corolla",
  year: 2020
};
Methods (Function):
Object ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá function ‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶§‡¶æ‡¶ï‡ßá method ‡¶¨‡¶≤‡¶æ ‡¶π‡ßü‡•§
‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

javascript
Copy code
const car = {
  brand: "Toyota",
  start: function() {
    console.log("The car has started!");
  }
};
car.start(); // Output: The car has started!
Object ‡¶è‡¶∞ ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶®:
‡ßß. Property Access:
Dot Notation:
javascript
Copy code
console.log(car.brand); // Output: Toyota
Bracket Notation:
javascript
Copy code
console.log(car["brand"]); // Output: Toyota
‡ß®. Property ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ:
javascript
Copy code
car.color = "Red";
‡ß©. Property ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ:
javascript
Copy code
delete car.year;
‡ß™. Object Iteration (‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡ßá‡¶ï‡¶ü‡¶ø property ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã):
javascript
Copy code
for (let key in car) {
  console.log(key, ":", car[key]);
}
‡ß´. Property Check:
javascript
Copy code
console.log("brand" in car); // Output: true
Object ‡¶è‡¶∞ Built-in Methods:
‡ßß. Object.keys()
Object ‡¶è‡¶∞ ‡¶∏‡¶¨ key ‡¶ó‡ßÅ‡¶≤‡ßã return ‡¶ï‡¶∞‡ßá:

javascript
Copy code
const keys = Object.keys(car);
console.log(keys); // Output: ["brand", "model", "color"]
‡ß®. Object.values()
Object ‡¶è‡¶∞ ‡¶∏‡¶¨ value ‡¶ó‡ßÅ‡¶≤‡ßã return ‡¶ï‡¶∞‡ßá:

javascript
Copy code
const values = Object.values(car);
console.log(values); // Output: ["Toyota", "Corolla", "Red"]
‡ß©. Object.entries()
Object ‡¶è‡¶∞ key-value pair return ‡¶ï‡¶∞‡ßá:

javascript
Copy code
const entries = Object.entries(car);
console.log(entries);
// Output: [["brand", "Toyota"], ["model", "Corolla"], ["color", "Red"]]
‡ß™. Object.assign()
‡¶è‡¶ï‡¶ü‡¶ø Object ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶ø Object ‡¶è ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ:

javascript
Copy code
const newCar = Object.assign({}, car);
‡ß´. Object.freeze()
Object ‡¶ï‡ßá immutable (‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶®‡ßü) ‡¶ï‡¶∞‡ßá:

javascript
Copy code
Object.freeze(car);
car.brand = "Honda"; // No effect
‡ß¨. Object.seal()
Property ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü:

javascript
Copy code
Object.seal(car);
delete car.model; // No effect
car.brand = "Honda"; // Works
Object ‡¶è‡¶∞ ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® Use-Case:
‡ßß. Nested Object (Object ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá Object):
javascript
Copy code
const student = {
  name: "John",
  subjects: {
    math: 90,
    science: 80
  }
};
console.log(student.subjects.math); // Output: 90
‡ß®. Array of Objects:
javascript
Copy code
const students = [
  { name: "John", age: 20 },
  { name: "Jane", age: 22 }
];
console.log(students[1].name); // Output: Jane
‡ß©. Object as Function Parameter:
javascript
Copy code
function greet({ name, age }) {
  console.log(`Hello ${name}, you are ${age} years old.`);
}
greet({ name: "John", age: 30 });
‡ß™. Object Destructuring:
javascript
Copy code
const { name, age } = student;
console.log(name); // Output: John
Object ‡¶è‡¶∞ Limitations:
Key ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü string ‡¶¨‡¶æ symbol ‡¶π‡ßü‡•§
‡¶Ø‡¶¶‡¶ø ‡¶Ö‡¶®‡ßá‡¶ï ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶π‡ßü ‡¶§‡¶¨‡ßá Object ‡¶è‡¶∞ ‡¶¨‡¶¶‡¶≤‡ßá Map ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã‡•§
Object vs Array:
Aspect	Object	Array
Structure	Key-Value Pair	Indexed List
Access Time	Fast for Known Keys	Fast for Sequential Access
Use Cases	Heterogeneous Data	Homogeneous Data
Object in Modern JavaScript:
ES6 ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£‡ßá object ‡¶®‡¶ø‡ßü‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶®‡¶§‡ßÅ‡¶® feature ‡¶è‡¶∏‡ßá‡¶õ‡ßá:

Spread Operator:
javascript
Copy code
const newCar = { ...car, color: "Blue" };
Computed Property Names:
javascript
Copy code
const key = "brand";
const car = { [key]: "Toyota" };
Optional Chaining:
javascript
Copy code
console.log(student?.subjects?.math); // Output: 90
‡¶∂‡ßá‡¶∑ ‡¶ï‡¶•‡¶æ:
Object ‡¶π‡¶≤ JavaScript ‡¶è‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡•§ ‡¶è‡¶ü‡¶ø ‡¶ú‡¶ü‡¶ø‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ö‡¶™‡¶∞‡¶ø‡¶π‡¶æ‡¶∞‡ßç‡¶Ø‡•§ Object ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶≠‡¶æ‡¶≤‡ßã‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßã‡¶ù‡¶æ ‡¶Æ‡¶æ‡¶®‡ßá JavaScript ‡¶è‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ ‡¶Ö‡¶Ç‡¶∂ ‡¶Ü‡ßü‡¶§‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ‡•§ üòä